/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.dabz.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VisitEventKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7533847923447575261L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VisitEventKey\",\"namespace\":\"io.confluent.dabz.model\",\"fields\":[{\"name\":\"page\",\"type\":\"string\",\"doc\":\"page visited by the user\"},{\"name\":\"day\",\"type\":\"int\",\"doc\":\"date of the visits\",\"logicalType\":\"date\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<VisitEventKey> ENCODER =
      new BinaryMessageEncoder<VisitEventKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<VisitEventKey> DECODER =
      new BinaryMessageDecoder<VisitEventKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<VisitEventKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<VisitEventKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<VisitEventKey>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this VisitEventKey to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a VisitEventKey from a ByteBuffer. */
  public static VisitEventKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** page visited by the user */
  @Deprecated public java.lang.CharSequence page;
  /** date of the visits */
  @Deprecated public int day;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VisitEventKey() {}

  /**
   * All-args constructor.
   * @param page page visited by the user
   * @param day date of the visits
   */
  public VisitEventKey(java.lang.CharSequence page, java.lang.Integer day) {
    this.page = page;
    this.day = day;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return page;
    case 1: return day;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: page = (java.lang.CharSequence)value$; break;
    case 1: day = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'page' field.
   * @return page visited by the user
   */
  public java.lang.CharSequence getPage() {
    return page;
  }

  /**
   * Sets the value of the 'page' field.
   * page visited by the user
   * @param value the value to set.
   */
  public void setPage(java.lang.CharSequence value) {
    this.page = value;
  }

  /**
   * Gets the value of the 'day' field.
   * @return date of the visits
   */
  public java.lang.Integer getDay() {
    return day;
  }

  /**
   * Sets the value of the 'day' field.
   * date of the visits
   * @param value the value to set.
   */
  public void setDay(java.lang.Integer value) {
    this.day = value;
  }

  /**
   * Creates a new VisitEventKey RecordBuilder.
   * @return A new VisitEventKey RecordBuilder
   */
  public static io.confluent.dabz.model.VisitEventKey.Builder newBuilder() {
    return new io.confluent.dabz.model.VisitEventKey.Builder();
  }

  /**
   * Creates a new VisitEventKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VisitEventKey RecordBuilder
   */
  public static io.confluent.dabz.model.VisitEventKey.Builder newBuilder(io.confluent.dabz.model.VisitEventKey.Builder other) {
    return new io.confluent.dabz.model.VisitEventKey.Builder(other);
  }

  /**
   * Creates a new VisitEventKey RecordBuilder by copying an existing VisitEventKey instance.
   * @param other The existing instance to copy.
   * @return A new VisitEventKey RecordBuilder
   */
  public static io.confluent.dabz.model.VisitEventKey.Builder newBuilder(io.confluent.dabz.model.VisitEventKey other) {
    return new io.confluent.dabz.model.VisitEventKey.Builder(other);
  }

  /**
   * RecordBuilder for VisitEventKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VisitEventKey>
    implements org.apache.avro.data.RecordBuilder<VisitEventKey> {

    /** page visited by the user */
    private java.lang.CharSequence page;
    /** date of the visits */
    private int day;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.dabz.model.VisitEventKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.page)) {
        this.page = data().deepCopy(fields()[0].schema(), other.page);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.day)) {
        this.day = data().deepCopy(fields()[1].schema(), other.day);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing VisitEventKey instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.dabz.model.VisitEventKey other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.page)) {
        this.page = data().deepCopy(fields()[0].schema(), other.page);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.day)) {
        this.day = data().deepCopy(fields()[1].schema(), other.day);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'page' field.
      * page visited by the user
      * @return The value.
      */
    public java.lang.CharSequence getPage() {
      return page;
    }

    /**
      * Sets the value of the 'page' field.
      * page visited by the user
      * @param value The value of 'page'.
      * @return This builder.
      */
    public io.confluent.dabz.model.VisitEventKey.Builder setPage(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.page = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'page' field has been set.
      * page visited by the user
      * @return True if the 'page' field has been set, false otherwise.
      */
    public boolean hasPage() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'page' field.
      * page visited by the user
      * @return This builder.
      */
    public io.confluent.dabz.model.VisitEventKey.Builder clearPage() {
      page = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'day' field.
      * date of the visits
      * @return The value.
      */
    public java.lang.Integer getDay() {
      return day;
    }

    /**
      * Sets the value of the 'day' field.
      * date of the visits
      * @param value The value of 'day'.
      * @return This builder.
      */
    public io.confluent.dabz.model.VisitEventKey.Builder setDay(int value) {
      validate(fields()[1], value);
      this.day = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'day' field has been set.
      * date of the visits
      * @return True if the 'day' field has been set, false otherwise.
      */
    public boolean hasDay() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'day' field.
      * date of the visits
      * @return This builder.
      */
    public io.confluent.dabz.model.VisitEventKey.Builder clearDay() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public VisitEventKey build() {
      try {
        VisitEventKey record = new VisitEventKey();
        record.page = fieldSetFlags()[0] ? this.page : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.day = fieldSetFlags()[1] ? this.day : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<VisitEventKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<VisitEventKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<VisitEventKey>
    READER$ = (org.apache.avro.io.DatumReader<VisitEventKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
